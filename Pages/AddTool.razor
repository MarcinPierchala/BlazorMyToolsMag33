@page "/addTool"
@attribute [Authorize]
@using BlazorMyToolsMag33.Models;
@using BlazorMyToolsMag33.Services;
@inject IToolsService ToolsService
@inject IPlacesService PlacesService
@inject IPersonsService PersonsService
@inject IToolCategoriesService ToolCategoriesService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
<h1>
    Add New Tool
</h1>

<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="Name" class="control-label">Name</label>
                <input for="Name" class="form-control" @bind-value="@tool.ToolName" />
                <td>Category    </td>
                <select class="form-control col-6" @onchange="@(x => OnSelCategoryChange(Convert.ToInt32(x.Value)))">
                    <option disabled selected value> -- select an option -- </option>
                    @if (toolCategories != null)
                    {
                        @foreach (var cats in toolCategories)
                        {
                            <option value=@cats.Id>@cats.ToolCategoryName</option>
                        }
                    }
                </select>
                <td>Person    </td>
                <select class="form-control col-6" @onchange="@(x => OnSelPersonChange(Convert.ToInt32(x.Value)))">
                    <option disabled selected value> -- select an option -- </option>
                    @if (persons != null)
                    {
                        @foreach (var cats in persons)
                        {
                            <option value=@cats.Id>@cats.PersonName</option>
                        }
                    }
                </select>
                <td>Place    </td>
                <select class="form-control col-6" @onchange="@(x => OnSelPlaceChange(Convert.ToInt32(x.Value)))">
                    <option disabled selected value> -- select an option -- </option>
                    @if (places != null)
                    {
                        @foreach (var cats in places)
                        {
                            <option value=@cats.Id>@cats.PlaceName</option>
                        }
                    }
                </select>
                <input type="hidden" @bind-value="@tool.Id" />
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="() => CreateArticle()">Save</button>
                <button type="button" class="btn btn-danger" @onclick="() => cancel()">Cancel</button>
            </div>
        </form>
    </div>
</div>

@code {

    Tool tool = new Tool();
    private IEnumerable<Place> places;
    private IEnumerable<Person> persons;
    private IEnumerable<ToolCategory> toolCategories;
    private string selectedCategory = "";
    private string selectedPlace = "";
    private string selectedPerson = "";

    protected override async Task OnInitializedAsync()
    {       
        places = await PlacesService.GetAll();      
        persons = await PersonsService.GetAll();       
        toolCategories = await ToolCategoriesService.GetAll();       
    }

    protected async Task CreateArticle()
    {
        await ToolsService.Create(tool);
        navigationManager.NavigateTo("/tools");
    }

    void cancel()
    {
        navigationManager.NavigateTo("/tools");
    }
    public void OnSelCategoryChange(int textValue) => tool.ToolCategoryId = textValue;
    public void OnSelPlaceChange(int textValue) => tool.PlaceId = textValue;
    public void OnSelPersonChange(int textValue) => tool.PersonId = textValue;
}